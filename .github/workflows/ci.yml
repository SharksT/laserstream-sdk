name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  DEBUG: napi:*
  APP_NAME: laserstream-napi
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: read
  id-token: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build -- --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build -- --target x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build -- --target x86_64-unknown-linux-gnu
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
        working-directory: javascript
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Setup Windows dependencies (fast)
        if: matrix.settings.host == 'windows-latest'
        shell: powershell
        run: |
          # Move operations to faster D: drive
          echo "CARGO_TARGET_DIR=D:\cargo-target" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "VCPKG_ROOT=D:\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          # Install both OpenSSL and protobuf via vcpkg (pre-compiled, much faster)
          mkdir D:\vcpkg
          git clone https://github.com/Microsoft/vcpkg.git D:\vcpkg --depth 1
          D:\vcpkg\bootstrap-vcpkg.bat
          D:\vcpkg\vcpkg.exe install openssl:x64-windows-static-md protobuf:x64-windows-static-md --clean-after-build
          
          # Set environment variables to use vcpkg-installed protobuf
          echo "OPENSSL_NO_VENDOR=1" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "OPENSSL_DIR=D:\vcpkg\installed\x64-windows-static-md" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "OPENSSL_LIB_DIR=D:\vcpkg\installed\x64-windows-static-md\lib" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "OPENSSL_INCLUDE_DIR=D:\vcpkg\installed\x64-windows-static-md\include" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PROTOC=D:\vcpkg\installed\x64-windows-static-md\tools\protobuf\protoc.exe" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PROTOBUF_SRC_ROOT_FOLDER=D:\vcpkg\installed\x64-windows-static-md" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PROTOBUF_LIB_DIR=D:\vcpkg\installed\x64-windows-static-md\lib" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PROTOBUF_INCLUDE_DIR=D:\vcpkg\installed\x64-windows-static-md\include" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          # Force protobuf-src to skip building from source
          echo "PROTOBUF_SRC_SKIP_BUILD=1" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          # Add protoc to PATH
          echo "D:\vcpkg\installed\x64-windows-static-md\tools\protobuf" | Out-File -FilePath $env:GITHUB_PATH -Append
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ${{ matrix.settings.host == 'windows-latest' && 'D:\cargo-target' || 'javascript/target/' }}
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}-${{ hashFiles('javascript/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}-
            ${{ matrix.settings.target }}-cargo-
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
        working-directory: javascript
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ${{ matrix.settings.host == 'windows-latest' && 'D:\cargo-target\**\*.node' || 'javascript/**/*.node' }}
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
      - name: Install dependencies
        run: npm ci
        working-directory: javascript
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create platform packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: javascript
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Create platform-specific packages
          for artifact in artifacts/bindings-*/; do
            target=$(basename "$artifact" | sed 's/bindings-//')
            echo "Creating package for $target"
            
            # Create package directory
            mkdir -p "platform-$target"
            cd "platform-$target"
            
            # Copy the .node file
            cp "../$artifact"/*.node ./ || continue
            
            # Determine package name based on target
            case $target in
              "x86_64-apple-darwin") PACKAGE_NAME="helius-laserstream-darwin-x64" ;;
              "aarch64-apple-darwin") PACKAGE_NAME="helius-laserstream-darwin-arm64" ;;
              "x86_64-pc-windows-msvc") PACKAGE_NAME="helius-laserstream-win32-x64-msvc" ;;
              "x86_64-unknown-linux-gnu") PACKAGE_NAME="helius-laserstream-linux-x64-gnu" ;;
              *) echo "Unknown target: $target"; continue ;;
            esac
            
            # Create package.json for platform package
            cat > package.json << EOF
          {
            "name": "$PACKAGE_NAME",
            "version": "$VERSION",
            "description": "Platform-specific binary for helius-laserstream ($target)",
            "main": "$(basename *.node)",
            "files": ["*.node"],
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/helius-labs/laserstream.git"
            },
            "publishConfig": {
              "access": "public"
            }
          }
          EOF
            
            # Publish platform package
            echo "Publishing $PACKAGE_NAME@$VERSION"
            npm publish
            
            cd ..
          done
      - name: Publish main package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: javascript
        run: |
          # Publish main package (without .node files)
          echo "Publishing main package helius-laserstream"
          npm publish 