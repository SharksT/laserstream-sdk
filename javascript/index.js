/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

switch (platform) {
  case 'darwin':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'laserstream-napi.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./laserstream-napi.darwin-x64.node')
          } else {
            nativeBinding = require('helius-laserstream-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'laserstream-napi.darwin-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./laserstream-napi.darwin-arm64.node')
          } else {
            nativeBinding = require('helius-laserstream-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        // Try local glibc build first
        localFileExisted = existsSync(join(__dirname, 'laserstream-napi.linux-x64-gnu.node'))
        if (localFileExisted) {
          try {
            nativeBinding = require('./laserstream-napi.linux-x64-gnu.node')
            break
          } catch (e) {
            loadError = e
          }
        }
        
        // Try local musl build
        const localMuslExisted = existsSync(join(__dirname, 'laserstream-napi.linux-x64-musl.node'))
        if (localMuslExisted) {
          try {
            nativeBinding = require('./laserstream-napi.linux-x64-musl.node')
            break
          } catch (e) {
            loadError = e
          }
        }

        // Try glibc package, fallback to musl package
        try {
          nativeBinding = require('helius-laserstream-linux-x64-gnu')
        } catch (e) {
          try {
            nativeBinding = require('helius-laserstream-linux-x64-musl')
          } catch (muslError) {
            loadError = e
          }
        }
        break
      case 'arm64':
        // Try local glibc build first
        localFileExisted = existsSync(join(__dirname, 'laserstream-napi.linux-arm64-gnu.node'))
        if (localFileExisted) {
          try {
            nativeBinding = require('./laserstream-napi.linux-arm64-gnu.node')
            break
          } catch (e) {
            loadError = e
          }
        }
        
        // Try local musl build
        const localMuslArm64Existed = existsSync(join(__dirname, 'laserstream-napi.linux-arm64-musl.node'))
        if (localMuslArm64Existed) {
          try {
            nativeBinding = require('./laserstream-napi.linux-arm64-musl.node')
            break
          } catch (e) {
            loadError = e
          }
        }

        // Try glibc package, fallback to musl package
        try {
          nativeBinding = require('helius-laserstream-linux-arm64-gnu')
        } catch (e) {
          try {
            nativeBinding = require('helius-laserstream-linux-arm64-musl')
          } catch (muslError) {
            loadError = e
          }
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

const { shutdownAllStreams, getActiveStreamCount, CommitmentLevel, LaserstreamClient, StreamHandle } = nativeBinding

module.exports.shutdownAllStreams = shutdownAllStreams
module.exports.getActiveStreamCount = getActiveStreamCount
module.exports.CommitmentLevel = CommitmentLevel
module.exports.LaserstreamClient = LaserstreamClient
module.exports.StreamHandle = StreamHandle
