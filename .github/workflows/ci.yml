name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  DEBUG: napi:*
  APP_NAME: laserstream-napi
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: read
  id-token: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build -- --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target aarch64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build -- --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: npm run build -- --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: npm run build -- --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: npm run build -- --target x86_64-unknown-linux-musl
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: npm run build -- --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine-aarch64
            build: npm run build -- --target aarch64-unknown-linux-musl
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: javascript
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: javascript/package-lock.json
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        if: ${{ !matrix.settings.docker }}
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            javascript/target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}-${{ hashFiles('javascript/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}-
            ${{ matrix.settings.target }}-cargo-
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: npm ci
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          cache: npm
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache:/root/.cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/root/.cargo/registry/index -v ${{ github.workspace }}:/build -w /build/javascript'
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: javascript/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    defaults:
      run:
        working-directory: javascript
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm
          cache-dependency-path: javascript/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create platform packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Create platform-specific packages
          for artifact in artifacts/bindings-*/; do
            target=$(basename "$artifact" | sed 's/bindings-//')
            echo "Creating package for $target"
            
            # Create package directory
            mkdir -p "platform-$target"
            cd "platform-$target"
            
            # Copy the .node file
            cp "../$artifact"/*.node ./ || continue
            
            # Determine package name based on target
            case $target in
              "x86_64-apple-darwin") PACKAGE_NAME="helius-laserstream-darwin-x64" ;;
              "aarch64-apple-darwin") PACKAGE_NAME="helius-laserstream-darwin-arm64" ;;
              "x86_64-pc-windows-msvc") PACKAGE_NAME="helius-laserstream-win32-x64-msvc" ;;
              "aarch64-pc-windows-msvc") PACKAGE_NAME="helius-laserstream-win32-arm64-msvc" ;;
              "x86_64-unknown-linux-gnu") PACKAGE_NAME="helius-laserstream-linux-x64-gnu" ;;
              "aarch64-unknown-linux-gnu") PACKAGE_NAME="helius-laserstream-linux-arm64-gnu" ;;
              "x86_64-unknown-linux-musl") PACKAGE_NAME="helius-laserstream-linux-x64-musl" ;;
              "aarch64-unknown-linux-musl") PACKAGE_NAME="helius-laserstream-linux-arm64-musl" ;;
              *) echo "Unknown target: $target"; continue ;;
            esac
            
            # Create package.json for platform package
            cat > package.json << EOF
          {
            "name": "$PACKAGE_NAME",
            "version": "$VERSION",
            "description": "Platform-specific binary for helius-laserstream ($target)",
            "main": "$(basename *.node)",
            "files": ["*.node"],
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/helius-labs/laserstream.git"
            },
            "publishConfig": {
              "access": "public"
            }
          }
          EOF
            
            # Publish platform package
            echo "Publishing $PACKAGE_NAME@$VERSION"
            npm publish
            
            cd ..
          done
      - name: Publish main package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Publish main package (without .node files)
          echo "Publishing main package helius-laserstream"
          npm publish 