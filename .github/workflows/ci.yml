name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  DEBUG: napi:*
  APP_NAME: laserstream-napi
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: read
  id-token: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: npm run build -- --target x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build -- --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: npm run build -- --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: CARGO_BUILD_TARGET=x86_64-unknown-linux-musl npm run build:musl
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: CARGO_BUILD_TARGET=aarch64-unknown-linux-musl npm run build:musl
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm ci
        working-directory: javascript
      - name: Install cross-compilation toolchains
        if: matrix.settings.host == 'ubuntu-latest'
        run: |
          case ${{ matrix.settings.target }} in
            aarch64-unknown-linux-gnu)
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
            x86_64-unknown-linux-musl|aarch64-unknown-linux-musl)
              sudo apt-get update
              sudo apt-get install -y musl-tools musl-dev gcc-aarch64-linux-gnu clang pkg-config
              # Install cross-compilation OpenSSL headers
              sudo apt-get install -y libssl-dev:amd64 libssl-dev:arm64 || true
              # Install Zig for cross-compilation
              wget -q https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz
              tar -xf zig-linux-x86_64-0.11.0.tar.xz
              sudo mv zig-linux-x86_64-0.11.0 /opt/zig
              echo "/opt/zig" >> $GITHUB_PATH
              # Install cargo-zigbuild for musl support
              cargo install cargo-zigbuild
              ;;
          esac
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            javascript/target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}-${{ hashFiles('javascript/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}-
            ${{ matrix.settings.target }}-cargo-
      - name: Build (non-musl)
        if: ${{ !contains(matrix.settings.target, 'musl') }}
        run: ${{ matrix.settings.build }}
        shell: bash
        working-directory: javascript
        env:
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          TARGET_CC: ${{ matrix.settings.target == 'aarch64-unknown-linux-gnu' && 'aarch64-linux-gnu-gcc' || '' }}
      - name: Build (musl)
        if: ${{ contains(matrix.settings.target, 'musl') }}
        run: ${{ matrix.settings.build }}
        shell: bash
        working-directory: javascript
        env:
          # Use vendored OpenSSL with specific configuration to avoid CT issues
          OPENSSL_STATIC: "1"
          OPENSSL_VENDORED: "1"
          # Disable Certificate Transparency and other problematic features
          OPENSSL_RUST_USE_NASM: "0"
          # Set configure args for openssl-src
          OPENSSL_CONFIGURE_ARGS: "no-ct no-ssl3 no-comp no-zlib no-zlib-dynamic no-md2 no-rc5 no-weak-ssl-ciphers no-camellia no-idea no-seed no-engine no-async"
          # Force use of clang for consistent compilation
          CC: "clang"
          CXX: "clang++"
      - name: Verify build output
        run: |
          if [ ! -f *.node ]; then
            echo "‚ùå Error: No .node file found after build"
            exit 1
          fi
          echo "‚úÖ Build output verified: $(ls -la *.node)"
          
          # Verify musl binaries are properly linked
          case ${{ matrix.settings.target }} in
            *musl*)
              echo "üîç Verifying musl binary linking..."
              for binary in *.node; do
                echo "Checking $binary:"
                file "$binary"
                # Check that it doesn't depend on glibc dynamic linker
                if ldd "$binary" 2>/dev/null | grep -q "ld-linux"; then
                  echo "‚ùå Error: $binary still links against glibc dynamic linker"
                  ldd "$binary" || true
                  exit 1
                elif ldd "$binary" 2>&1 | grep -q "not a dynamic executable"; then
                  echo "‚úÖ $binary is statically linked (good for musl)"
                else
                  echo "‚ö†Ô∏è $binary dynamic linking info:"
                  ldd "$binary" || true
                fi
              done
              ;;
            *)
              echo "‚ÑπÔ∏è Non-musl target, skipping musl verification"
              ;;
          esac
        working-directory: javascript
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            javascript/**/*.node
          if-no-files-found: error

  test-alpine:
    name: Test Alpine Linux compatibility
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Download musl artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bindings-*musl*
          path: artifacts
      - name: Test Alpine Linux compatibility
        run: |
          # Create test package.json
          cat > test-package.json << 'EOF'
          {
            "name": "alpine-test",
            "version": "1.0.0",
            "dependencies": {}
          }
          EOF
          
          # Create Alpine test
          cat > test-alpine.dockerfile << 'EOF'
          FROM node:20-alpine
          
          WORKDIR /app
          
          # Copy artifacts
          COPY artifacts/ ./artifacts/
          COPY test-package.json package.json
          COPY javascript/client.js ./
          COPY javascript/index.js ./
          COPY javascript/proto-decoder.js ./
          COPY javascript/proto/ ./proto/
          
          # Install musl binaries locally
          RUN find artifacts -name "*.node" -path "*musl*" -exec cp {} ./ \;
          
          # Create simple test
          RUN echo 'try {' > test.js && \
              echo '  const fs = require("fs");' >> test.js && \
              echo '  const files = fs.readdirSync(".").filter(f => f.endsWith(".node"));' >> test.js && \
              echo '  console.log("üìÅ Available .node files:", files);' >> test.js && \
              echo '  if (files.length === 0) throw new Error("No .node files found");' >> test.js && \
              echo '  const { LaserstreamClient } = require("./index.js");' >> test.js && \
              echo '  console.log("‚úÖ SUCCESS: Alpine Linux compatibility verified!");' >> test.js && \
              echo '  console.log("LaserstreamClient type:", typeof LaserstreamClient);' >> test.js && \
              echo '} catch (error) {' >> test.js && \
              echo '  console.error("‚ùå FAILED:", error.message);' >> test.js && \
              echo '  process.exit(1);' >> test.js && \
              echo '}' >> test.js
          
          CMD ["node", "test.js"]
          EOF
          
          # Build and run Alpine test
          docker build -f test-alpine.dockerfile -t laserstream-alpine-test .
          docker run --rm laserstream-alpine-test

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build, test-alpine]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Install dependencies
        run: npm ci
        working-directory: javascript
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create platform packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: javascript
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Check if artifacts directory exists
          if [ ! -d "../artifacts" ]; then
            echo "‚ùå Error: artifacts directory not found!"
            exit 1
          fi
          
          # List artifacts for debugging
          echo "üì¶ Available artifacts:"
          ls -la ../artifacts/
          
          # Track successful packages
          PUBLISHED_COUNT=0
          
          # Create platform-specific packages
          for artifact in ../artifacts/bindings-*/; do
            if [ ! -d "$artifact" ]; then
              echo "‚ùå Error: artifact directory $artifact not found!"
              continue
            fi
            
            target=$(basename "$artifact" | sed 's/bindings-//')
            echo "üî® Creating package for $target"
            
            # Debug: List artifact contents
            echo "üîç Contents of $artifact:"
            find "$artifact" -name "*.node" -type f
            
            # Check if .node files exist (they should be in javascript/ subdirectory)
            if ! find "$artifact" -name "*.node" -type f | head -1 > /dev/null; then
              echo "‚ùå Error: No .node files found in $artifact"
              exit 1
            fi
            
            # Create package directory
            mkdir -p "platform-$target"
            cd "platform-$target"
            
            # Copy the .node file (from javascript/ subdirectory)
            find "../$artifact" -name "*.node" -type f -exec cp {} ./ \; || {
              echo "‚ùå Error: Failed to copy .node files from $artifact"
              exit 1
            }
            
            # Verify .node file was copied
            if ! ls *.node 1> /dev/null 2>&1; then
              echo "‚ùå Error: No .node files found after copy"
              exit 1
            fi
            
            # Determine package name and platform info based on target
            case $target in
              "x86_64-apple-darwin") 
                PACKAGE_NAME="helius-laserstream-darwin-x64"
                OS_FIELD="darwin"
                CPU_FIELD="x64"
                MAIN_BINARY="laserstream-napi.darwin-x64.node"
                ;;
              "aarch64-apple-darwin") 
                PACKAGE_NAME="helius-laserstream-darwin-arm64"
                OS_FIELD="darwin"
                CPU_FIELD="arm64"
                MAIN_BINARY="laserstream-napi.darwin-arm64.node"
                ;;
              "x86_64-unknown-linux-gnu") 
                PACKAGE_NAME="helius-laserstream-linux-x64-gnu"
                OS_FIELD="linux"
                CPU_FIELD="x64"
                MAIN_BINARY="laserstream-napi.linux-x64-gnu.node"
                ;;
              "aarch64-unknown-linux-gnu") 
                PACKAGE_NAME="helius-laserstream-linux-arm64-gnu"
                OS_FIELD="linux"
                CPU_FIELD="arm64"
                MAIN_BINARY="laserstream-napi.linux-arm64-gnu.node"
                ;;
              "x86_64-unknown-linux-musl") 
                PACKAGE_NAME="helius-laserstream-linux-x64-musl"
                OS_FIELD="linux"
                CPU_FIELD="x64"
                MAIN_BINARY="laserstream-napi.linux-x64-musl.node"
                ;;
              "aarch64-unknown-linux-musl") 
                PACKAGE_NAME="helius-laserstream-linux-arm64-musl"
                OS_FIELD="linux"
                CPU_FIELD="arm64"
                MAIN_BINARY="laserstream-napi.linux-arm64-musl.node"
                ;;
              *) echo "‚ùå Unknown target: $target"; exit 1 ;;
            esac
            
            # Create package.json for platform package
            cat > package.json << EOF
          {
            "name": "$PACKAGE_NAME",
            "version": "$VERSION",
            "description": "Platform-specific binary for helius-laserstream ($target)",
            "main": "$MAIN_BINARY",
            "files": ["*.node"],
            "os": ["$OS_FIELD"],
            "cpu": ["$CPU_FIELD"],
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/helius-labs/laserstream.git"
            },
            "publishConfig": {
              "access": "public"
            }
          }
          EOF
            
            # Publish platform package
            echo "üì§ Publishing $PACKAGE_NAME@$VERSION"
            npm publish || {
              echo "‚ùå Error: Failed to publish $PACKAGE_NAME"
              exit 1
            }
            
            PUBLISHED_COUNT=$((PUBLISHED_COUNT + 1))
            cd ..
          done
          
          # Verify we published expected number of packages
          if [ "$PUBLISHED_COUNT" -ne 6 ]; then
            echo "‚ùå Error: Expected 6 platform packages, but published $PUBLISHED_COUNT"
            exit 1
          fi
          
          echo "‚úÖ Successfully published $PUBLISHED_COUNT platform packages"
      - name: Publish main package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: javascript
        run: |
          # Publish main package (without .node files)
          echo "üì§ Publishing main package helius-laserstream"
          npm publish || {
            echo "‚ùå Error: Failed to publish main package"
            exit 1
          }
          echo "‚úÖ Successfully published main package"
      - name: Verify publication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: javascript
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "üîç Verifying publication of version $VERSION"
          
          # Wait a moment for NPM to propagate
          sleep 10
          
          # Check main package
          if ! npm view helius-laserstream@$VERSION version > /dev/null 2>&1; then
            echo "‚ùå Error: Main package helius-laserstream@$VERSION not found on NPM"
            exit 1
          fi
          
          # Check platform packages
          PLATFORM_PACKAGES=(
            "helius-laserstream-darwin-x64"
            "helius-laserstream-darwin-arm64"
            "helius-laserstream-linux-x64-gnu"
            "helius-laserstream-linux-arm64-gnu"
            "helius-laserstream-linux-x64-musl"
            "helius-laserstream-linux-arm64-musl"
          )
          
          for package in "${PLATFORM_PACKAGES[@]}"; do
            if ! npm view "$package@$VERSION" version > /dev/null 2>&1; then
              echo "‚ùå Error: Platform package $package@$VERSION not found on NPM"
              exit 1
            fi
            echo "‚úÖ Verified: $package@$VERSION"
          done
          
          echo "üéâ All packages successfully published and verified!" 